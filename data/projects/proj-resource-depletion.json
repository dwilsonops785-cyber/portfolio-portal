{
  "id": "proj-resource-depletion-001",
  "slug": "sno911-resource-depletion-monitor",
  "title": "SNO911 Resource Depletion Monitor",
  "shortDescription": "A real-time emergency services monitoring dashboard for Snohomish County 911 that tracks and visualizes resource depletion alerts across four fire zones. Features automated Gmail integration, real-time zone status updates, historical analytics, and concurrent event detection.",
  "longDescription": "# SNO911 Resource Depletion Monitor\n\nA production web application designed for Snohomish County 911 (SNO911) emergency coordinators to track and analyze resource depletion alerts in real-time.\n\n## The Challenge\n\nEmergency coordinators receive resource depletion alerts via email when fire zones (Zones 9, 10, 11, and 12) run low on:\n- **ALS Units** (Advanced Life Support)\n- **Suppression Units** (Fire Suppression)\n\nThese critical alerts arrive sporadically and create several operational challenges:\n- No centralized view of current resource status\n- Difficult to identify patterns over time\n- Hard to detect concurrent multi-zone incidents\n- No historical analysis capabilities\n- Email-based tracking is cumbersome during emergencies\n\n## The Solution\n\nThe Resource Depletion Monitor consolidates all alerts into a single, powerful dashboard with real-time monitoring and comprehensive analytics.\n\n## Core Features\n\n### Real-Time Zone Status\n- **Live Dashboard**: Visual status cards for all 4 zones\n- **Color-Coded Indicators**: Green (adequate), Yellow (warning), Red (critical)\n- **Unit Availability**: Shows current ALS and Suppression unit counts\n- **Last Updated**: Timestamp of most recent status change\n- **Quick Overview**: See all zones at a glance\n\n### Automated Email Monitoring\n- **Gmail API Integration**: OAuth 2.0 authenticated connection\n- **Auto-Sync Every 5 Minutes**: Scheduled email checking via node-cron\n- **Smart Parsing**: Extracts zone, alert type, severity from zAWARE emails\n- **Duplicate Prevention**: Tracks processed emails by message ID\n- **Original Timestamp Extraction**: Captures actual alert time (not received time)\n- **Subject Pattern Matching**: Only processes relevant resource depletion alerts\n\n### Historical Event Tracking\n- **Complete Timeline**: Every resource depletion event logged\n- **Searchable Database**: SQLite storage with fast queries\n- **Event Details**: Zone, type, severity, timestamp, email content\n- **Audit Trail**: Full history for incident review and analysis\n- **Export Capabilities**: Data can be queried for reports\n\n### Advanced Analytics Dashboard\n\n#### Time Series Analysis\n- **Trend Charts**: ApexCharts visualization showing depletion events over time\n- **Zone Comparison**: Side-by-side analysis of all zones\n- **Alert Type Breakdown**: Separate ALS vs Suppression trends\n- **Time Filters**: Daily, weekly, monthly, custom date ranges\n\n#### Heatmap Visualization\n- **Day of Week Patterns**: Identify which days have most incidents\n- **Hour of Day Analysis**: Peak depletion times\n- **Zone Hotspots**: Which zones deplete most frequently\n- **Color-Graded Intensity**: Visual representation of frequency\n\n#### Concurrent Event Detection\n- **Multi-Zone Alerts**: Identifies when multiple zones are depleted simultaneously\n- **Critical Incident Recognition**: Highlights system-wide strain\n- **Timeline View**: See overlap of concurrent events\n- **Alert Notifications**: Special flags for concurrent depletion\n\n#### Statistical Insights\n- **Frequency Analysis**: Events per zone per time period\n- **Severity Distribution**: Percentage breakdown by severity level\n- **Response Time Metrics**: Time between depletion and recovery\n- **Pattern Recognition**: Day/time patterns for predictive planning\n\n### Weather Correlation (Future Enhancement)\n- Historical weather data integration planned\n- Correlate depletion with weather conditions\n- Identify weather-related patterns\n- Predictive modeling capabilities\n\n### Secure Access Control\n\n#### Role-Based Authentication\n- **Admin Role**: Full system access, user management, settings\n- **Chief Role**: View all data, analytics, operations log\n- **Viewer Role**: Read-only access to dashboard and analytics\n- **Session Management**: Express-session with secure cookies\n- **Password Security**: bcryptjs hashing with salt\n\n#### User Management\n- **User Creation**: Admins can add new users\n- **Role Assignment**: Flexible permission levels\n- **Password Resets**: Secure credential management\n- **Login Tracking**: Session history and audit logs\n\n### Operations Log\n- **Team Communication**: Built-in messaging for coordinators\n- **Activity Logging**: Track actions and decisions\n- **Timestamp All Entries**: Complete communication history\n- **Multi-User Support**: Collaborative environment\n- **Searchable Archive**: Find past communications quickly\n\n## Technical Architecture\n\n### Backend Stack\n- **Node.js (v18)**: Server runtime environment\n- **Express.js**: Web application framework\n- **SQLite3**: Embedded relational database\n- **Gmail API**: Google's email API for reading alerts\n- **OAuth 2.0**: Secure Gmail authentication\n- **bcryptjs**: Password hashing and security\n- **express-session**: Session management\n- **node-cron**: Scheduled task automation\n- **googleapis**: Official Google API client\n- **uuid**: Unique identifier generation\n\n### Frontend Stack\n- **Vanilla JavaScript**: Client-side logic\n- **HTML5/CSS3**: Modern responsive UI\n- **ApexCharts**: Interactive data visualization\n- **D3.js**: Advanced charting capabilities\n- **Responsive Design**: Mobile and desktop optimized\n\n### Database Schema\n\n#### depletion_events Table\n- **email_id**: Unique Gmail message ID (prevents duplicates)\n- **zone**: 9, 10, 11, or 12\n- **alert_type**: 'ALS' or 'Suppression'\n- **severity_percentage**: 0-100 (0% for ALS, variable for Suppression)\n- **original_timestamp**: Actual alert time from email\n- **email_subject**: Original subject line\n- **email_body**: Full email content\n- **raw_data**: JSON metadata for debugging\n- **created_at**: Database insertion timestamp\n\n#### zone_status Table\n- **zone**: Zone identifier\n- **als_available**: Number of ALS units\n- **suppression_percentage**: Suppression availability %\n- **last_updated**: Most recent status change\n- **last_als_alert**: Timestamp of last ALS depletion\n- **last_suppression_alert**: Timestamp of last Suppression depletion\n\n#### users Table\n- **username**: Unique username\n- **password**: bcrypt hashed password\n- **role**: 'admin', 'chief', or 'viewer'\n- **created_at**: Account creation timestamp\n\n#### operations_log Table\n- **username**: User who created entry\n- **message**: Log entry content\n- **timestamp**: Entry creation time\n\n### Data Flow\n\n1. **Email Arrives** at dwilsonops785@gmail.com from zAWARE system\n2. **Scheduled Task** (every 5 min) checks Gmail API for new messages\n3. **Parser** extracts zone, type, severity from email\n4. **Database Insert** stores event in depletion_events table\n5. **Zone Status Update** updates current availability in zone_status\n6. **Dashboard Refresh** clients poll API for updates every 30 seconds\n7. **Analytics Update** charts and stats recalculate with new data\n\n## Deployment Architecture\n\n### Production Environment\n- **Platform**: Fly.io (free tier)\n- **Container**: Docker Alpine Linux + Node.js 18\n- **Database**: SQLite (file-based, included in container)\n- **SSL/TLS**: Automatic HTTPS via Fly.io\n- **URL**: Custom fly.dev subdomain\n- **Uptime**: 24/7 with auto-restart on failure\n\n### CI/CD Workflow\n- **Git Branches**: main (production), dev (development)\n- **Deployment**: `flyctl deploy` from main branch\n- **Environment Variables**: Stored in Fly.io secrets\n- **Database Persistence**: Volume-mounted SQLite file\n- **Zero-Downtime Deploys**: Rolling updates\n\n## Security Features\n\n### Authentication\n- **Session-Based Auth**: Express-session with secure cookies\n- **Password Hashing**: bcryptjs with automatic salt generation\n- **OAuth 2.0**: Gmail API access via Google OAuth\n- **Role-Based Access**: Granular permission control\n\n### API Security\n- **CORS Configuration**: Restricted to dashboard domain\n- **Session Expiry**: Automatic logout after inactivity\n- **Rate Limiting**: Prevents API abuse (planned)\n- **Input Validation**: Sanitized user inputs\n\n### Data Security\n- **Environment Variables**: Sensitive credentials in .env\n- **Database Encryption**: SQLite file permissions\n- **Gmail Tokens**: Refresh tokens stored securely\n- **Audit Logging**: All user actions tracked\n\n## Key Innovations\n\n### Automated Email Processing\n- First system to automatically ingest zAWARE resource depletion alerts\n- Transforms email notifications into structured data\n- Eliminates manual tracking and spreadsheet maintenance\n- Real-time alerting without human intervention\n\n### Multi-Zone Visibility\n- Single dashboard showing all 4 fire zones simultaneously\n- Instant identification of system-wide issues\n- Concurrent event detection for critical incidents\n- Historical comparison across zones\n\n### Predictive Analytics Capability\n- Pattern recognition for day/time trends\n- Identifies high-risk periods\n- Supports proactive resource allocation\n- Foundation for machine learning integration\n\n### Lightweight Architecture\n- SQLite database requires zero administration\n- No external database server needed\n- Simple deployment process\n- Cost-effective solution (free tier hosting)\n\n## User Experience\n\n### Dashboard Interface\n- **Clean, Professional Design**: Focus on critical information\n- **Color-Coded Status**: Instant visual assessment\n- **Responsive Layout**: Works on desktop, tablet, mobile\n- **Fast Load Times**: Optimized for quick decision-making\n- **Intuitive Navigation**: Role-appropriate menus\n\n### Analytics Interface\n- **Interactive Charts**: Zoom, pan, filter capabilities\n- **Multiple Visualizations**: Charts, heatmaps, tables\n- **Export Options**: Download data for external analysis\n- **Custom Date Ranges**: Flexible time period selection\n- **Real-Time Updates**: Live data streaming\n\n## Production Use\n\nThis system is actively deployed and used by SNO911 emergency coordinators to:\n- Monitor real-time resource availability across fire zones\n- Identify patterns in resource depletion events\n- Support incident analysis and after-action reviews\n- Improve resource allocation strategies\n- Facilitate communication among emergency management staff\n\n## Impact\n\n- **Operational Efficiency**: Eliminates manual email tracking\n- **Situational Awareness**: Real-time zone status at a glance\n- **Data-Driven Decisions**: Historical analytics support planning\n- **Improved Response**: Faster identification of multi-zone incidents\n- **Cost Savings**: Free hosting, no licensing fees\n- **Scalability**: Can expand to additional zones or alert types\n\n## Future Enhancements\n\n### Planned Features (V2)\n- Weather API integration for correlation analysis\n- Push notifications for critical concurrent events\n- Mobile app for on-the-go monitoring\n- Machine learning for predictive modeling\n- Advanced reporting with PDF export\n- Integration with CAD (Computer-Aided Dispatch) systems\n- SMS/text alert capabilities\n- Multi-agency dashboard for mutual aid coordination\n\n### Technical Improvements\n- PostgreSQL migration for enhanced scalability\n- Redis caching for improved performance\n- GraphQL API for flexible data queries\n- WebSocket connections for real-time updates\n- Enhanced security with 2FA\n- Comprehensive API rate limiting\n- Automated backup system\n\n## Why This Project Matters\n\nThis project demonstrates:\n\n✅ **Real-World Impact**: Actively used by emergency services\n\n✅ **Full-Stack Development**: Backend API, database design, frontend UI\n\n✅ **API Integration**: Gmail API, OAuth 2.0 authentication\n\n✅ **Data Visualization**: Complex analytics and charting\n\n✅ **Production Deployment**: Docker containerization, cloud hosting\n\n✅ **Security**: Authentication, authorization, data protection\n\n✅ **Automation**: Scheduled tasks, email parsing, real-time updates\n\n✅ **Problem-Solving**: Transformed manual email tracking into automated system\n\nThe SNO911 Resource Depletion Monitor represents a complete, production-grade application that solves real operational challenges for emergency services while showcasing advanced full-stack development capabilities.",
  "status": "production",
  "labels": [
    "Emergency Services",
    "Real-Time Monitoring",
    "Gmail API",
    "Data Visualization",
    "Emergency Management",
    "Analytics Dashboard",
    "OAuth 2.0",
    "Production"
  ],
  "technologies": [
    "Node.js",
    "Express",
    "SQLite",
    "Gmail API",
    "OAuth 2.0",
    "JavaScript",
    "HTML5",
    "CSS3",
    "ApexCharts",
    "D3.js",
    "Docker",
    "Fly.io",
    "bcryptjs",
    "node-cron"
  ],
  "metrics": {
    "developmentHours": 80,
    "linesOfCode": 3500
  },
  "screenshots": [
    "/screenshots/resource-depletion/resource depletion.png"
  ],
  "thumbnailUrl": "/screenshots/resource-depletion/resource depletion.png",
  "demoType": "live",
  "demoUrl": "https://sno911-dashboard.fly.dev/dashboard.html",
  "currentVersion": "1.0.0",
  "createdAt": "2024-05-01T00:00:00.000Z",
  "updatedAt": "2024-10-28T00:00:00.000Z",
  "featured": true,
  "sortOrder": 3
}
